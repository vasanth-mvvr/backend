pipeline{
    agent{
        label 'AGENT-1'
    }
    options{
        timeout(time: 30,unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    environment{
        def appVersion = ''
    }

    stages{
        // stage('Version'){
        //     steps{
        //         script{
        //             def packageJson = readJSON file: 'package.json'
        //             appVersion = packageJson.version
        //             echo " The app version is : ${appVersion}"
        //         }
        //     }
        // }
        // stage('Install Dependencies'){
        //     steps{
        //         sh """
        //             This is test message
        //             echo " The app version is : ${appVersion}"
        //             ls -ltr
        //             npm install
                
        //         """
        //     }
        // }
        //     stage('zip'){
        //         steps{
        //             sh """
        //             zip -q -r backend-${appVersion}.zip * -x JenkinsFile -x backend-${appVersion}.zip
        //             ls -ltr
        //             """
        //         }
        //     }
        stage('test'){
            steps{
                echo "this is test stage"
            }
        }
        
        }

        post{
            always {
                echo ' i always say hello'
                deleteDir()
            }
            success{
                echo 'success'
            }
            failure{
                echo 'failure'
            }
        }
    
}