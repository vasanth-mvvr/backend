pipeline{
    agent{
        label 'AGENT-1'
    }
    options{
        timeout(time: 30,unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    // environment{
    //     def appVersion = ''
    // }

    stages{
        stage('version'){
            steps{
                script{
                    def packageJson = readJSON file: 'package.json'
                    def appVersion = packageJson.version
                    echo "the app version is : ${appVersion}"

                    env.APP_VERSION = ${appVersion} 
                }
            }
        }
        stage('Install Dependencies'){
            steps{
                sh """
                    echo "the app version is : ${APP_VERSION}"
                    npm install
                    ls -ltr
                
                """
            }
        }
        //     stage('zip'){
        //         steps{
        //             sh """
        //             zip -q -r backend-${appVersion}.zip * -x JenkinsFile -x backend-${appVersion}.zip
        //             ls -ltr
        //             """
        //         }
        //     }
        // stage('test'){
        //     steps{
                
        //         sh """
        //         ls -ltr
        //         echo "this is test stage"
        //         """
        //     }
        // }
        
        }

        post{
            always {
                echo ' i always say hello'
                deleteDir()
            }
            success{
                echo 'success'
            }
            failure{
                echo 'failure'
            }
        }
    
}